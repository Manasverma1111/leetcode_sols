class Solution {
    public int leastInterval(char[] tasks, int n) {
        if (n == 0) {
            return tasks.length;
        }

        int[] tasksCount = new int[26];
        for (int task : tasks) {
            tasksCount[task - 'A']++;
        }

        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        for (int count : tasksCount) {
            if (count > 0){
                maxHeap.add(count);
            }
        }

        int intervals = 0;
        while(!maxHeap.isEmpty()) {
            List<Integer> temp = new ArrayList<>();
            int cycle = n + 1;

        for (int i = 0; i < cycle; i++) {
            if (!maxHeap.isEmpty()) {
                temp.add(maxHeap.poll() - 1);
            }
        }

        for (int num : temp) {
            if (num > 0) {
                maxHeap.add(num);
            }
        }

        intervals += maxHeap.isEmpty() ? temp.size() : cycle;
        }

        return intervals;
    }
}