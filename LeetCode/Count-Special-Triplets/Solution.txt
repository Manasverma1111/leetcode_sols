class Solution {
    public int specialTriplets(int[] nums) {

        int MOD = 1000000007;
        int n = nums.length;
        long total = 0;

        int[] leftCount = new int[n];
        Map<Integer, Integer> leftMap = new HashMap<>();
        for (int j = 0; j < n; j++) {
            int target = 2 * nums[j];
            leftCount[j] = leftMap.getOrDefault(target, 0);
            leftMap.put(nums[j], leftMap.getOrDefault(nums[j], 0) + 1);
        }

        int[] rightCount = new int[n];
        Map<Integer, Integer> rightMap = new HashMap<>();
        for (int j = n - 1; j >= 0; j--) {
            int target = 2 * nums[j];
            rightCount[j] = rightMap.getOrDefault(target, 0);
            rightMap.put(nums[j], rightMap.getOrDefault(nums[j], 0) + 1);
        }

        for (int j = 0; j < n; j++) {
            total = (total + (long)leftCount[j] * rightCount[j]) % MOD;
        }

        return (int)total;
    }
}